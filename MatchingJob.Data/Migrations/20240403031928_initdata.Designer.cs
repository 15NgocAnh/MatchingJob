// <auto-generated />
using System;
using MatchingJob.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MatchingJob.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240403031928_initdata")]
    partial class initdata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MatchingJob.Entities.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredSkills")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TypeOfWork")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("MatchingJob.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ROLE_ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ROLE_USER"
                        },
                        new
                        {
                            Id = 3,
                            Name = "ROLE_GUEST"
                        });
                });

            modelBuilder.Entity("MatchingJob.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsersId");

                    b.ToTable("Skill");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "BACKEND"
                        },
                        new
                        {
                            Id = 2,
                            Name = "FONTEND"
                        });
                });

            modelBuilder.Entity("MatchingJob.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("date");

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Experience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMale")
                        .HasColumnType("bit");

                    b.Property<Guid?>("JobsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobsId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f4106a3c-16b9-41c2-9178-50027f51edac"),
                            BirthDay = new DateTime(2015, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Education = "Bachelor's Degree",
                            Email = "johndoe@example.com",
                            Experience = "1 years as a Fontend Dev",
                            FirstName = "John",
                            IsDeleted = false,
                            IsEmailConfirmed = false,
                            IsLocked = false,
                            IsMale = true,
                            LastName = "Doe",
                            Location = "New York",
                            Password = "John123@doe",
                            PhoneNumber = "+1 123-456-7890",
                            UserName = "johndoe"
                        },
                        new
                        {
                            Id = new Guid("7a602c19-f917-4d7d-82d8-992e35c172d6"),
                            BirthDay = new DateTime(2015, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Education = "Hue University",
                            Email = "nguyenvana@gmail.com",
                            Experience = "3 years as a Backend Developer",
                            FirstName = "A",
                            IsDeleted = false,
                            IsEmailConfirmed = false,
                            IsLocked = false,
                            IsMale = true,
                            LastName = "Nguyen Van",
                            Location = "Hue, Viet Nam",
                            Password = "12345NguyenA@",
                            PhoneNumber = "086 3458 471",
                            UserName = "nguyena123"
                        },
                        new
                        {
                            Id = new Guid("94bca55e-27db-444b-8f6c-6d05a1ab431b"),
                            BirthDay = new DateTime(2015, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Education = "Hue University",
                            Email = "nguyenthib123@gmail.com",
                            Experience = "4 years as a Backend Developer",
                            FirstName = "B",
                            IsDeleted = false,
                            IsEmailConfirmed = false,
                            IsLocked = false,
                            IsMale = false,
                            LastName = "Nguyen Thi",
                            Location = "Hue, Viet Nam",
                            Password = "12345ThiB@",
                            PhoneNumber = "086 3643 874",
                            UserName = "nguyenthib123"
                        });
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("MatchingJob.Entities.Skill", b =>
                {
                    b.HasOne("MatchingJob.Entities.User", "Users")
                        .WithMany("Skills")
                        .HasForeignKey("UsersId");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MatchingJob.Entities.User", b =>
                {
                    b.HasOne("MatchingJob.Entities.Job", "Jobs")
                        .WithMany("Users")
                        .HasForeignKey("JobsId");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("MatchingJob.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchingJob.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchingJob.Entities.Job", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MatchingJob.Entities.User", b =>
                {
                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
